import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import api from '../../helpers/api'

const initialState = {
  chats: [],
}

export const getChats = createAsyncThunk('chats/getChats', async () => {
  const response = await api.get(`/chats`)
  // The value we return becomes the `fulfilled` action payload
  return response.data
})

export const addChat = createAsyncThunk('chats/addChat', async (title) => {
  const response = await api.post('/chats', {
    title,
  })
  // The value we return becomes the `fulfilled` action payload
  return response.data
})

export const chatsSlice = createSlice({
  name: 'chats',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getChats.fulfilled, (state, action) => {
      state.chats = action.payload
    })

    builder.addCase(addChat.fulfilled, (state, action) => {
      state.chats.push(action.payload)
    })
  },
})

// export const { increment, decrement, incrementByAmount } = chatsSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectChats = (state) => state.chats.chats

export default chatsSlice.reducer
